// Copyright (C) HCI-BCU. All rights reserved.
// Published under GPLv3 License, 2025. See LICENSE in the Plugin Root for more information.

#pragma once

#include "CoreMinimal.h"

#include "Generators/AudioGenerator.h"
#include "Sound/SampleBufferIO.h"
#include "Delegates/DelegateCombinations.h"
#include "AudioDeviceNotificationSubsystem.h"

#include "AudioManager.generated.h"

USTRUCT()
struct FAudioManagerSettings
{
    GENERATED_BODY()

public:
    FAudioManagerSettings()
    {
        // Default Settings
        LevelThreshold = -2.5f;
        SaveName = FString("Captured_User_Audio");
        SavePath = FString("./Accession/Audioclips/");
    }

    // The Threshold for incoming audio to be considered as input.
    UPROPERTY(Config, EditAnywhere, Category = "Accession/Audio Manager")
    float LevelThreshold;

    /// <summary>
    /// The Name of the Audio File to be saved to.
    /// </summary>
    UPROPERTY(Config, EditAnywhere, Category = "Accession/Audio Manager")
    FString SaveName;

    /// <summary>
    /// The Path to save recorded audio files to.
    /// </summary>
    UPROPERTY(Config, EditAnywhere, Category = "Accession/Audio Manager")
    FString SavePath;
};

/**
 *
 */
UCLASS(BlueprintType, Blueprintable, Config = Accession)
class ACCESSIONCOMMUNICATION_API UAudioManager : public UObject
{
    GENERATED_BODY()

public:
    UAudioManager(const FObjectInitializer &ObjectInitializer);
    virtual ~UAudioManager();

    /// <summary>
    /// Is the Audio Manager Currently Capturing Audio.
    /// </summary>
    /// <returns>True, if Audio is being Captured. False, if Audio is being ignored.</returns>
    bool IsCapturingAudio() const;

    /// <summary>
    /// Gets the Sample Rate of the Audio Capture.
    /// </summary>
    /// <returns>The Sample Rate of the Audiocapture.</returns>
    int32 GetAudioCaptureSampleRate() const;

    /// <summary>
    /// Gets the Number of Channels of the Audio Capture.
    /// </summary>
    /// <returns>The Number of Channels used in the Audiocapture.</returns>
    int32 GetAudioCaptureNumChannels() const;

    /// <summary>
    /// Starts The Capturing of Audio onto the Buffer.
    /// </summary>
    void StartCapturingAudio();

    /// <summary>
    /// Stops the Capturing of Audio onto the Buffer, and sends the audio to the transcription service.
    /// </summary>
    void StopCapturingAudio();

    /// <summary>
    /// Callback For When Audio is Generated by The Audio Stream.
    /// </summary>
    /// <param name="InAudio">- The Incoming Audiobuffer Array.</param>
    /// <param name="NumSamples">- The Size of the Incoming Audiobuffer in Samples.</param>
    void PRIVATE_OnAudioGenerate(const float *InAudio, int32 NumSamples);

    /// <summary>
    /// Saves the Audio Buffer to a WAV File.
    /// </summary>
    /// <param name="FilePath">- The Path To Save the Audiobuffers WAV File.</param>
    void SaveAudioBufferToWAV(const FString &FilePath);

    /// <summary>
    /// Callback for when the Default Audio Device Changes.
    /// Allowing for dynamic re-registration of the Audio Generator, to make sure the new device is being used.
    /// </summary>
    /// <param name="ChangedRole"></param>
    /// <param name="DeviceID"></param>
    void OnDefaultDeviceChanged(EAudioDeviceChangedRole ChangedRole, FString DeviceID);

private:
    void RegisterAudioGenerator();

    void UnregisterAudioGenerator();

public:
    /// <summary>
    /// The Settings of the Audio Manager.
    /// </summary>
    UPROPERTY(Config, EditAnywhere, Category = "OpenAccessibility/Audio Manager")
    FAudioManagerSettings Settings;

    /// <summary>
    /// Delegate for when the AudioBuffer is Ready To Be Sent For Transcription.
    /// </summary>
    TDelegate<void(const TArray<float>)> OnAudioReadyForTranscription;

private:
    // Audio Capture
    bool bIsCapturingAudio = false;

    UPROPERTY(EditDefaultsOnly, Category = "OpenAccessibility/Audio Capture")
    class UAudioCapture *AudioCapture;

    UPROPERTY(EditDefaultsOnly, Category = "OpenAccessibility/Audio Capture")
    TArray<float> AudioBuffer;

    FAudioGeneratorHandle OnAudioGenerateHandle;

    FDelegateHandle OnDefaultDeviceChangedHandle;

    // Audio Saving
    Audio::FSoundWavePCMWriter *FileWriter;
};